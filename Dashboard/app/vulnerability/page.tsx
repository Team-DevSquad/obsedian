'use client';
import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer, AreaChart, Area, LineChart, Line, RadarChart, Radar, PolarGrid, PolarAngleAxis, PolarRadiusAxis } from "recharts";
import { BugIcon, ShieldAlert, ShieldHalf, ShieldCheck, TrendingUp, Target, Calendar, AlertTriangle } from "lucide-react";
import withAuth from '@/utils/withAuth';

// Enhanced vulnerability data with more details
const foundVulnerabilities = [
  { id: "A1:2023", severity: "Critical", title: "Injection", count: 8, impact: 9, likelihood: 8 },
  { id: "A2:2023", severity: "High", title: "Broken Authentication", count: 6, impact: 8, likelihood: 7 },
  { id: "A3:2023", severity: "Medium", title: "Sensitive Data Exposure", count: 12, impact: 6, likelihood: 5 },
  { id: "A5:2023", severity: "Critical", title: "Broken Access Control", count: 5, impact: 9, likelihood: 6 },
  { id: "A7:2023", severity: "Medium", title: "Cross-Site Scripting (XSS)", count: 15, impact: 5, likelihood: 7 }
];

// Enhanced severity counts
const severityCounts = foundVulnerabilities.reduce<Record<string, number>>((acc, vuln) => {
  acc[vuln.severity] = (acc[vuln.severity] || 0) + 1;
  return acc;
}, {});

// Pie chart data
const pieChartData = Object.entries(severityCounts).map(([severity, count]) => ({
  name: severity,
  value: count
}));

// Color scheme
const COLORS = {
  critical: "#dc2626",
  high: "#ea580c",
  medium: "#ca8a04",
  low: "#16a34a",
  background: {
    critical: "bg-red-50 dark:bg-red-900/20",
    high: "bg-orange-50 dark:bg-orange-900/20",
    medium: "bg-yellow-50 dark:bg-yellow-900/20",
    low: "bg-green-50 dark:bg-green-900/20"
  }
};

// Monthly trend data with more details
const monthlyTrendData = [
  { month: "Jan", total: 12, critical: 3, high: 4, medium: 3, low: 2 },
  { month: "Feb", total: 18, critical: 5, high: 6, medium: 4, low: 3 },
  { month: "Mar", total: 15, critical: 4, high: 5, medium: 4, low: 2 },
  { month: "Apr", total: 22, critical: 6, high: 8, medium: 5, low: 3 },
  { month: "May", total: 20, critical: 5, high: 7, medium: 5, low: 3 },
  { month: "Jun", total: 25, critical: 8, high: 9, medium: 5, low: 3 }
];

// Risk matrix data
const riskMatrixData = foundVulnerabilities.map(vuln => ({
  name: vuln.id,
  impact: vuln.impact,
  likelihood: vuln.likelihood
}));

interface StatCardProps {
  title: string;
  value: number;
  icon: React.ElementType;
  colorClass: string;
  trend?: string;
}

const StatCard = ({ title, value, icon: Icon, colorClass, trend }: StatCardProps) => (
  <Card className={colorClass}>
    <CardHeader className="pb-2">
      <CardTitle className="flex items-center gap-2 text-lg">
        <Icon className="h-5 w-5" />
        {title}
      </CardTitle>
    </CardHeader>
    <CardContent>
      <div className="flex items-end justify-between">
        <p className="text-3xl font-bold">{value}</p>
        {trend && (
          <div className="flex items-center text-sm">
            <TrendingUp className="h-4 w-4 mr-1" />
            {trend}
          </div>
        )}
      </div>
    </CardContent>
  </Card>
);


function VulnerabilityDashboard() {
  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between mb-8">
        <h1 className="text-3xl font-bold flex items-center gap-2">
          <ShieldAlert className="h-8 w-8" />
          Security Vulnerability Dashboard
        </h1>
        <div className="flex items-center gap-2 text-sm text-gray-500">
          <Calendar className="h-4 w-4" />
          Last updated: {new Date().toLocaleDateString()}
        </div>
      </div>

      {/* Severity Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <StatCard 
          title="Critical" 
          value={severityCounts["Critical"] || 0} 
          icon={AlertTriangle} 
          colorClass={COLORS.background.critical}
          trend="+2 this week"
        />
        <StatCard 
          title="High" 
          value={severityCounts["High"] || 0} 
          icon={ShieldAlert} 
          colorClass={COLORS.background.high}
          trend="+1 this week"
        />
        <StatCard 
          title="Medium" 
          value={severityCounts["Medium"] || 0} 
          icon={ShieldHalf} 
          colorClass={COLORS.background.medium}
          trend="-3 this week"
        />
        <StatCard 
          title="Low" 
          value={severityCounts["Low"] || 0} 
          icon={ShieldCheck} 
          colorClass={COLORS.background.low}
          trend="No change"
        />
      </div>

      {/* Main Charts Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Trend Analysis */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <TrendingUp className="h-5 w-5" />
              Vulnerability Trends by Severity
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-[400px]">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={monthlyTrendData}>
                  <XAxis dataKey="month" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line type="monotone" dataKey="critical" stroke={COLORS.critical} />
                  <Line type="monotone" dataKey="high" stroke={COLORS.high} />
                  <Line type="monotone" dataKey="medium" stroke={COLORS.medium} />
                  <Line type="monotone" dataKey="low" stroke={COLORS.low} />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        {/* Risk Matrix */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Target className="h-5 w-5" />
              Risk Assessment Matrix
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-[400px]">
              <ResponsiveContainer width="100%" height="100%">
                <RadarChart data={riskMatrixData}>
                  <PolarGrid />
                  <PolarAngleAxis dataKey="name" />
                  <PolarRadiusAxis />
                  <Radar name="Impact" dataKey="impact" stroke={COLORS.critical} fill={COLORS.critical} fillOpacity={0.3} />
                  <Radar name="Likelihood" dataKey="likelihood" stroke={COLORS.high} fill={COLORS.high} fillOpacity={0.3} />
                  <Legend />
                  <Tooltip />
                </RadarChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        {/* Severity Distribution */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <ShieldAlert className="h-5 w-5" />
              Severity Distribution
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-[400px]">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={pieChartData}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    outerRadius={150}
                    fill="#8884d8"
                    dataKey="value"
                    label={({ name, percent }) => `${name} (${(percent * 100).toFixed(0)}%)`}
                  >
                    {pieChartData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={[COLORS.critical, COLORS.high, COLORS.medium, COLORS.low][index]} />
                    ))}
                  </Pie>
                  <Tooltip />
                  <Legend />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        {/* Timeline View */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Calendar className="h-5 w-5" />
              Vulnerability Timeline
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-[400px]">
              <ResponsiveContainer width="100%" height="100%">
                <AreaChart data={monthlyTrendData}>
                  <XAxis dataKey="month" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Area
                    type="monotone"
                    dataKey="total"
                    stroke={COLORS.critical}
                    fill={COLORS.critical}
                    fillOpacity={0.3}
                  />
                </AreaChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

export default withAuth(VulnerabilityDashboard);